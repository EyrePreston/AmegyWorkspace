package org.talend.designer.codegen.translators.cloud.google;

import org.talend.core.model.process.INode;
import org.talend.core.model.process.ElementParameterParser;
import org.talend.core.model.process.IConnection;
import org.talend.core.model.process.IConnectionCategory;
import org.talend.designer.codegen.config.CodeGeneratorArgument;
import java.util.List;

public class TGoogleDriveBeginJava
{
  protected static String nl;
  public static synchronized TGoogleDriveBeginJava create(String lineSeparator)
  {
    nl = lineSeparator;
    TGoogleDriveBeginJava result = new TGoogleDriveBeginJava();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "\tde.jlo.talendcomp.gdrive.DriveHelper ";
  protected final String TEXT_2 = " = de.jlo.talendcomp.gdrive.DriveHelper.getFromCache(";
  protected final String TEXT_3 = " + ";
  protected final String TEXT_4 = " + \"";
  protected final String TEXT_5 = "\" + jobName);" + NL + "\tif (";
  protected final String TEXT_6 = " == null) {" + NL + "\t\t";
  protected final String TEXT_7 = " = new de.jlo.talendcomp.gdrive.DriveHelper();";
  protected final String TEXT_8 = NL + "\t   de.jlo.talendcomp.gdrive.DriveHelper ";
  protected final String TEXT_9 = " = new de.jlo.talendcomp.gdrive.DriveHelper();";
  protected final String TEXT_10 = NL + "        // create new drive client";
  protected final String TEXT_11 = NL + "        ";
  protected final String TEXT_12 = ".setUseServiceAccount(";
  protected final String TEXT_13 = ");";
  protected final String TEXT_14 = NL + "        // setup credentials with service account" + NL + "\t\t";
  protected final String TEXT_15 = ".setAccountEmail(";
  protected final String TEXT_16 = ");" + NL + "\t\t";
  protected final String TEXT_17 = ".setKeyFile(";
  protected final String TEXT_18 = ");";
  protected final String TEXT_19 = NL + "        // setup client with client-Id for native applications" + NL + "\t\t";
  protected final String TEXT_20 = ".setAccountEmail(";
  protected final String TEXT_21 = ");" + NL + "\t\t";
  protected final String TEXT_22 = ".setClientSecretFile(";
  protected final String TEXT_23 = ");";
  protected final String TEXT_24 = " ";
  protected final String TEXT_25 = NL + "\t\t";
  protected final String TEXT_26 = ".setTimeoutInSeconds(";
  protected final String TEXT_27 = ");";
  protected final String TEXT_28 = NL + "        // prevent token validation problems caused by time differences between own host and Google" + NL + "\t\t";
  protected final String TEXT_29 = ".setTimeMillisOffsetToPast(";
  protected final String TEXT_30 = ");";
  protected final String TEXT_31 = NL + "\t\t";
  protected final String TEXT_32 = ".setApplicationName(";
  protected final String TEXT_33 = ");";
  protected final String TEXT_34 = NL + "\t\ttry {" + NL + "\t\t    // initialize drive client" + NL + "\t\t\t";
  protected final String TEXT_35 = ".initializeClient();" + NL + "\t\t} catch (Exception e) {" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_36 = "_ERROR_MESSAGE\", e.getMessage());" + NL + "\t\t\tthrow e;" + NL + "\t\t}" + NL + "\t\tglobalMap.put(\"";
  protected final String TEXT_37 = "\", ";
  protected final String TEXT_38 = ");" + NL + "\t\tglobalMap.put(\"drive_";
  protected final String TEXT_39 = "\", ";
  protected final String TEXT_40 = ".getDriveService());";
  protected final String TEXT_41 = NL + "\t\tde.jlo.talendcomp.gdrive.DriveHelper.putIntoCache(";
  protected final String TEXT_42 = " + ";
  protected final String TEXT_43 = " + \"";
  protected final String TEXT_44 = "\" + jobName, ";
  protected final String TEXT_45 = ");";
  protected final String TEXT_46 = NL + "      // use existing drive client" + NL + "\t  ";
  protected final String TEXT_47 = ".setDriveService((com.google.api.services.drive.Drive) globalMap.get(\"drive_";
  protected final String TEXT_48 = "\"));";
  protected final String TEXT_49 = NL + "   }" + NL + "   int countFiles_";
  protected final String TEXT_50 = " = 0; ";
  protected final String TEXT_51 = NL + "\t// delete a file" + NL + "    com.google.api.services.drive.model.File file_";
  protected final String TEXT_52 = " = null;" + NL + "\ttry {";
  protected final String TEXT_53 = NL + "\t    System.out.println(\"Delete file id=\" + ";
  protected final String TEXT_54 = "); " + NL + "\t    // delete file in drive by file-Id" + NL + "\t\tfile_";
  protected final String TEXT_55 = " = ";
  protected final String TEXT_56 = ".deleteById(";
  protected final String TEXT_57 = ", ";
  protected final String TEXT_58 = ");";
  protected final String TEXT_59 = NL + "\t    System.out.println(\"Delete file path=\" + ";
  protected final String TEXT_60 = "); " + NL + "\t    // delete file in drive by file path" + NL + "\t\tfile_";
  protected final String TEXT_61 = " = ";
  protected final String TEXT_62 = ".deleteByName(";
  protected final String TEXT_63 = ", ";
  protected final String TEXT_64 = ");";
  protected final String TEXT_65 = NL + "\t\tthrow new Exception(\"No File-Id or File path provided\");";
  protected final String TEXT_66 = NL + "\t\tif (file_";
  protected final String TEXT_67 = " != null) {" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_68 = "_FILE_ID\", file_";
  protected final String TEXT_69 = ".getId());" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_70 = "_FILE_TITLE\", file_";
  protected final String TEXT_71 = ".getTitle());" + NL + "\t\t\tif (file_";
  protected final String TEXT_72 = ".getCreatedDate() != null) {" + NL + "\t\t\t\tglobalMap.put(\"";
  protected final String TEXT_73 = "_FILE_CREATED_AT\", new java.util.Date(file_";
  protected final String TEXT_74 = ".getCreatedDate().getValue()));" + NL + "\t\t\t}" + NL + "\t\t\tif (file_";
  protected final String TEXT_75 = ".getModifiedDate() != null) {" + NL + "\t\t\t\tglobalMap.put(\"";
  protected final String TEXT_76 = "_FILE_MODIFIED_AT\", new java.util.Date(file_";
  protected final String TEXT_77 = ".getModifiedDate().getValue()));" + NL + "\t\t\t}" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_78 = "_FILE_OWNERS\", de.jlo.talendcomp.gdrive.DriveHelper.buildChainForUsers(file_";
  protected final String TEXT_79 = ".getOwners(), \",\"));" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_80 = "_FILE_SIZE\", file_";
  protected final String TEXT_81 = ".getId());" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_82 = "_FILE_MIME_TYPE\", file_";
  protected final String TEXT_83 = ".getMimeType());" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_84 = "_FILE_IS_FOLDER\", de.jlo.talendcomp.gdrive.DriveHelper.isFolder(file_";
  protected final String TEXT_85 = "));" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_86 = "_FILE_EXISTS\", true);" + NL + "\t\t} else {" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_87 = "_FILE_EXISTS\", false);" + NL + "\t\t}" + NL + "\t} catch (Exception e) {" + NL + "\t\tglobalMap.put(\"";
  protected final String TEXT_88 = "_ERROR_MESSAGE\", e.getMessage());" + NL + "\t\tthrow e;" + NL + "\t}";
  protected final String TEXT_89 = NL + "\tif (file_";
  protected final String TEXT_90 = " != null) {";
  protected final String TEXT_91 = "\t";
  protected final String TEXT_92 = NL + "\t// retrieve file properties" + NL + "   com.google.api.services.drive.model.File file_";
  protected final String TEXT_93 = " = null;" + NL + "\ttry {";
  protected final String TEXT_94 = NL + "\t    System.out.println(\"Get properties from file id=\" + ";
  protected final String TEXT_95 = "); " + NL + "\t    // read the file metadata by file-Id" + NL + "\t\tfile_";
  protected final String TEXT_96 = " = ";
  protected final String TEXT_97 = ".getById(";
  protected final String TEXT_98 = ");";
  protected final String TEXT_99 = NL + "\t    System.out.println(\"Get properties from file path=\" + ";
  protected final String TEXT_100 = "); " + NL + "\t    // read the file metadata by the drive file path" + NL + "\t\tfile_";
  protected final String TEXT_101 = " = ";
  protected final String TEXT_102 = ".getByName(";
  protected final String TEXT_103 = ");";
  protected final String TEXT_104 = NL + "\t\tthrow new Exception(\"No File-Id or File path provided\");";
  protected final String TEXT_105 = NL + "\t\tif (file_";
  protected final String TEXT_106 = " != null) {" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_107 = "_FILE_ID\", file_";
  protected final String TEXT_108 = ".getId());" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_109 = "_FILE_TITLE\", file_";
  protected final String TEXT_110 = ".getTitle());" + NL + "\t\t\tif (file_";
  protected final String TEXT_111 = ".getCreatedDate() != null) {" + NL + "\t\t\t\tglobalMap.put(\"";
  protected final String TEXT_112 = "_FILE_CREATED_AT\", new java.util.Date(file_";
  protected final String TEXT_113 = ".getCreatedDate().getValue()));" + NL + "\t\t\t}" + NL + "\t\t\tif (file_";
  protected final String TEXT_114 = ".getModifiedDate() != null) {" + NL + "\t\t\t\tglobalMap.put(\"";
  protected final String TEXT_115 = "_FILE_MODIFIED_AT\", new java.util.Date(file_";
  protected final String TEXT_116 = ".getModifiedDate().getValue()));" + NL + "\t\t\t}" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_117 = "_FILE_OWNERS\", de.jlo.talendcomp.gdrive.DriveHelper.buildChainForUsers(file_";
  protected final String TEXT_118 = ".getOwners(), \",\"));" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_119 = "_FILE_SIZE\", file_";
  protected final String TEXT_120 = ".getId());" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_121 = "_FILE_MIME_TYPE\", file_";
  protected final String TEXT_122 = ".getMimeType());" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_123 = "_FILE_IS_FOLDER\", de.jlo.talendcomp.gdrive.DriveHelper.isFolder(file_";
  protected final String TEXT_124 = "));" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_125 = "_FILE_EXISTS\", true);" + NL + "\t\t} else {" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_126 = "_FILE_EXISTS\", false);" + NL + "\t\t}" + NL + "\t} catch (Exception e) {" + NL + "\t\tglobalMap.put(\"";
  protected final String TEXT_127 = "_ERROR_MESSAGE\", e.getMessage());" + NL + "\t\tthrow e;" + NL + "\t}";
  protected final String TEXT_128 = NL + "\tif (file_";
  protected final String TEXT_129 = " != null) {";
  protected final String TEXT_130 = "\t";
  protected final String TEXT_131 = NL + "\t// Move file" + NL + "   com.google.api.services.drive.model.File file_";
  protected final String TEXT_132 = " = null;" + NL + "\ttry {";
  protected final String TEXT_133 = NL + "\t    System.out.println(\"Move file with id=\" + ";
  protected final String TEXT_134 = "); " + NL + "\t    // move the file by file-Id" + NL + "\t\tfile_";
  protected final String TEXT_135 = " = ";
  protected final String TEXT_136 = ".moveToFolderById(" + NL + "\t\t\t\t\t\t\t\t\t";
  protected final String TEXT_137 = ",           // file-id" + NL + "\t\t\t\t\t\t\t\t\t";
  protected final String TEXT_138 = ",       // remotePath" + NL + "\t\t\t\t\t\t\t\t\t";
  protected final String TEXT_139 = "); // createRemoteDir";
  protected final String TEXT_140 = NL + "\t    System.out.println(\"Move file with path=\" + ";
  protected final String TEXT_141 = "); " + NL + "\t    // move the file by file-Id" + NL + "\t\tfile_";
  protected final String TEXT_142 = " = ";
  protected final String TEXT_143 = ".moveToFolderByName(" + NL + "\t\t\t\t\t\t\t\t\t";
  protected final String TEXT_144 = ",    // driveFilePath" + NL + "\t\t\t\t\t\t\t\t\t";
  protected final String TEXT_145 = ",       // remotePath" + NL + "\t\t\t\t\t\t\t\t\t";
  protected final String TEXT_146 = "); // createRemoteDir";
  protected final String TEXT_147 = NL + "\t\tthrow new Exception(\"No File-Id or File path provided\");";
  protected final String TEXT_148 = NL + "\t\tif (file_";
  protected final String TEXT_149 = " != null) {" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_150 = "_FILE_ID\", file_";
  protected final String TEXT_151 = ".getId());" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_152 = "_FILE_TITLE\", file_";
  protected final String TEXT_153 = ".getTitle());" + NL + "\t\t\tif (file_";
  protected final String TEXT_154 = ".getCreatedDate() != null) {" + NL + "\t\t\t\tglobalMap.put(\"";
  protected final String TEXT_155 = "_FILE_CREATED_AT\", new java.util.Date(file_";
  protected final String TEXT_156 = ".getCreatedDate().getValue()));" + NL + "\t\t\t}" + NL + "\t\t\tif (file_";
  protected final String TEXT_157 = ".getModifiedDate() != null) {" + NL + "\t\t\t\tglobalMap.put(\"";
  protected final String TEXT_158 = "_FILE_MODIFIED_AT\", new java.util.Date(file_";
  protected final String TEXT_159 = ".getModifiedDate().getValue()));" + NL + "\t\t\t}" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_160 = "_FILE_OWNERS\", de.jlo.talendcomp.gdrive.DriveHelper.buildChainForUsers(file_";
  protected final String TEXT_161 = ".getOwners(), \",\"));" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_162 = "_FILE_SIZE\", file_";
  protected final String TEXT_163 = ".getId());" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_164 = "_FILE_MIME_TYPE\", file_";
  protected final String TEXT_165 = ".getMimeType());" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_166 = "_FILE_IS_FOLDER\", de.jlo.talendcomp.gdrive.DriveHelper.isFolder(file_";
  protected final String TEXT_167 = "));" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_168 = "_FILE_EXISTS\", true);" + NL + "\t\t} else {" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_169 = "_FILE_EXISTS\", false);" + NL + "\t\t}" + NL + "\t} catch (Exception e) {" + NL + "\t\tglobalMap.put(\"";
  protected final String TEXT_170 = "_ERROR_MESSAGE\", e.getMessage());" + NL + "\t\tthrow e;" + NL + "\t}";
  protected final String TEXT_171 = NL + "\tif (file_";
  protected final String TEXT_172 = " != null) {";
  protected final String TEXT_173 = "\t";
  protected final String TEXT_174 = NL + "\t// upload a file" + NL + "   com.google.api.services.drive.model.File file_";
  protected final String TEXT_175 = " = null;" + NL + "\ttry {" + NL + "\t    System.out.println(\"Upload file \" + ";
  protected final String TEXT_176 = "); " + NL + "\t\tfile_";
  protected final String TEXT_177 = " = ";
  protected final String TEXT_178 = ".upload(" + NL + "\t\t    ";
  protected final String TEXT_179 = ", // localUploadFile" + NL + "\t\t\t";
  protected final String TEXT_180 = ",       // title" + NL + "\t\t\t";
  protected final String TEXT_181 = ",      // remotePath" + NL + "\t\t\t";
  protected final String TEXT_182 = ", // createRemoteDir" + NL + "\t\t\t";
  protected final String TEXT_183 = ");      // overwrite" + NL + "\t\tif (file_";
  protected final String TEXT_184 = " != null) {";
  protected final String TEXT_185 = NL + "   \t\t\t";
  protected final String TEXT_186 = ".setPermissionAsOwner(file_";
  protected final String TEXT_187 = ".getId(), ";
  protected final String TEXT_188 = ", ";
  protected final String TEXT_189 = ");";
  protected final String TEXT_190 = NL + "   \t\t\t";
  protected final String TEXT_191 = ".setPermissionAsReader(file_";
  protected final String TEXT_192 = ".getId(), ";
  protected final String TEXT_193 = ", ";
  protected final String TEXT_194 = ");";
  protected final String TEXT_195 = NL + "   \t\t\t";
  protected final String TEXT_196 = ".setPermissionAsWriter(file_";
  protected final String TEXT_197 = ".getId(), ";
  protected final String TEXT_198 = ", ";
  protected final String TEXT_199 = ");";
  protected final String TEXT_200 = NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_201 = "_FILE_ID\", file_";
  protected final String TEXT_202 = ".getId());" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_203 = "_FILE_TITLE\", file_";
  protected final String TEXT_204 = ".getTitle());" + NL + "\t\t\tif (file_";
  protected final String TEXT_205 = ".getCreatedDate() != null) {" + NL + "\t\t\t\tglobalMap.put(\"";
  protected final String TEXT_206 = "_FILE_CREATED_AT\", new java.util.Date(file_";
  protected final String TEXT_207 = ".getCreatedDate().getValue()));" + NL + "\t\t\t}" + NL + "\t\t\tif (file_";
  protected final String TEXT_208 = ".getModifiedDate() != null) {" + NL + "\t\t\t\tglobalMap.put(\"";
  protected final String TEXT_209 = "_FILE_MODIFIED_AT\", new java.util.Date(file_";
  protected final String TEXT_210 = ".getModifiedDate().getValue()));" + NL + "\t\t\t}" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_211 = "_FILE_OWNERS\", de.jlo.talendcomp.gdrive.DriveHelper.buildChainForUsers(file_";
  protected final String TEXT_212 = ".getOwners(), \",\"));" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_213 = "_FILE_SIZE\", file_";
  protected final String TEXT_214 = ".getId());" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_215 = "_FILE_MIME_TYPE\", file_";
  protected final String TEXT_216 = ".getMimeType());" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_217 = "_FILE_IS_FOLDER\", de.jlo.talendcomp.gdrive.DriveHelper.isFolder(file_";
  protected final String TEXT_218 = "));" + NL + "\t\t}";
  protected final String TEXT_219 = NL + "      java.io.File f = new java.io.File(";
  protected final String TEXT_220 = ");" + NL + "\t\tSystem.out.println(\"Delete local source file \" + f.getAbsolutePath());" + NL + "\t\tf.delete();";
  protected final String TEXT_221 = NL + "\t} catch (Exception e) {" + NL + "\t\tglobalMap.put(\"";
  protected final String TEXT_222 = "_ERROR_MESSAGE\", e.getMessage());" + NL + "\t\tthrow e;" + NL + "\t}";
  protected final String TEXT_223 = NL + "\tif (file_";
  protected final String TEXT_224 = " != null) {";
  protected final String TEXT_225 = "\t";
  protected final String TEXT_226 = NL + "\t// download a file" + NL + "   com.google.api.services.drive.model.File file_";
  protected final String TEXT_227 = " = null;" + NL + "\ttry {" + NL + "\t    globalMap.remove(\"";
  protected final String TEXT_228 = "_DOWNLOADED_FILEPATH\");" + NL + "\t    globalMap.remove(\"";
  protected final String TEXT_229 = "_DOWNLOADED_FILESIZE\");";
  protected final String TEXT_230 = NL + "\t    System.out.println(\"Download file id=\" + ";
  protected final String TEXT_231 = " + \" to \" + ";
  protected final String TEXT_232 = "); " + NL + "\t    // download the drive file by the file-Id" + NL + "\t\tfile_";
  protected final String TEXT_233 = " = ";
  protected final String TEXT_234 = ".downloadById(";
  protected final String TEXT_235 = ", ";
  protected final String TEXT_236 = ", ";
  protected final String TEXT_237 = ", ";
  protected final String TEXT_238 = ");";
  protected final String TEXT_239 = NL + "\t    System.out.println(\"Get properties from file path=\" + ";
  protected final String TEXT_240 = "); " + NL + "\t    // download the file by its drive file path" + NL + "\t\tfile_";
  protected final String TEXT_241 = " = ";
  protected final String TEXT_242 = ".downloadByName(";
  protected final String TEXT_243 = ", ";
  protected final String TEXT_244 = ", ";
  protected final String TEXT_245 = ", ";
  protected final String TEXT_246 = ");";
  protected final String TEXT_247 = NL + "\t\tthrow new Exception(\"No File-Id or File path provided\");";
  protected final String TEXT_248 = NL + "\t\tif (file_";
  protected final String TEXT_249 = " != null) {" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_250 = "_DOWNLOADED_FILEPATH\", ";
  protected final String TEXT_251 = ".getLastDownloadedFilePath());" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_252 = "_DOWNLOADED_FILESIZE\", ";
  protected final String TEXT_253 = ".getLastDownloadedFileSize());" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_254 = "_FILE_ID\", file_";
  protected final String TEXT_255 = ".getId());" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_256 = "_FILE_TITLE\", file_";
  protected final String TEXT_257 = ".getTitle());" + NL + "\t\t\tif (file_";
  protected final String TEXT_258 = ".getCreatedDate() != null) {" + NL + "\t\t\t\tglobalMap.put(\"";
  protected final String TEXT_259 = "_FILE_CREATED_AT\", new java.util.Date(file_";
  protected final String TEXT_260 = ".getCreatedDate().getValue()));" + NL + "\t\t\t}" + NL + "\t\t\tif (file_";
  protected final String TEXT_261 = ".getModifiedDate() != null) {" + NL + "\t\t\t\tglobalMap.put(\"";
  protected final String TEXT_262 = "_FILE_MODIFIED_AT\", new java.util.Date(file_";
  protected final String TEXT_263 = ".getModifiedDate().getValue()));" + NL + "\t\t\t}" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_264 = "_FILE_OWNERS\", de.jlo.talendcomp.gdrive.DriveHelper.buildChainForUsers(file_";
  protected final String TEXT_265 = ".getOwners(), \",\"));" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_266 = "_FILE_SIZE\", file_";
  protected final String TEXT_267 = ".getId());" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_268 = "_FILE_MIME_TYPE\", file_";
  protected final String TEXT_269 = ".getMimeType());" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_270 = "_FILE_IS_FOLDER\", de.jlo.talendcomp.gdrive.DriveHelper.isFolder(file_";
  protected final String TEXT_271 = "));" + NL + "\t\t}";
  protected final String TEXT_272 = NL + "        System.out.println(\"Delete downloaded file id=\" + ";
  protected final String TEXT_273 = " + \" from drive\");" + NL + "\t\t";
  protected final String TEXT_274 = ".deleteById(";
  protected final String TEXT_275 = ", false);";
  protected final String TEXT_276 = NL + "\t\tglobalMap.put(\"";
  protected final String TEXT_277 = "_FILE_EXISTS\", true);" + NL + "\t} catch (Exception e) {" + NL + "\t\tglobalMap.put(\"";
  protected final String TEXT_278 = "_ERROR_MESSAGE\", e.getMessage());" + NL + "\t\tthrow e;" + NL + "\t}";
  protected final String TEXT_279 = NL + "\tif (file_";
  protected final String TEXT_280 = " != null) {";
  protected final String TEXT_281 = "\t";
  protected final String TEXT_282 = NL + "\t// list files" + NL + "\tjava.util.List<com.google.api.services.drive.model.File> fileList_";
  protected final String TEXT_283 = " = null;" + NL + "\ttry {" + NL + "\t    System.out.println(\"List files\"); " + NL + "\t    // list the files metadata" + NL + "\t\tfileList_";
  protected final String TEXT_284 = " = ";
  protected final String TEXT_285 = ".list(" + NL + "\t\t\t";
  protected final String TEXT_286 = ", // filterRegex" + NL + "\t\t\t";
  protected final String TEXT_287 = ", // filterRegexCaseSensitive " + NL + "\t\t\t";
  protected final String TEXT_288 = ", // q-string" + NL + "\t\t\t";
  protected final String TEXT_289 = ", // titleStartsWith" + NL + "\t\t\t";
  protected final String TEXT_290 = ", // fullTextSearch" + NL + "\t\t\t";
  protected final String TEXT_291 = ", // remoteSearchModifiedFrom" + NL + "\t\t\t";
  protected final String TEXT_292 = ", // remoteSearchModifiedTo" + NL + "\t\t\t";
  protected final String TEXT_293 = ", // owner" + NL + "\t\t\t";
  protected final String TEXT_294 = ", // includeFolderInResult" + NL + "\t\t\t";
  protected final String TEXT_295 = ");  // remoteSearchPath" + NL + "\t} catch (Exception e) {" + NL + "\t\tglobalMap.put(\"";
  protected final String TEXT_296 = "_ERROR_MESSAGE\", e.getMessage());" + NL + "\t\tthrow e;" + NL + "\t}";
  protected final String TEXT_297 = NL + "\tfor (com.google.api.services.drive.model.File file_";
  protected final String TEXT_298 = " : fileList_";
  protected final String TEXT_299 = ") {\t" + NL + "\t\tglobalMap.put(\"";
  protected final String TEXT_300 = "_FILE_ID\", file_";
  protected final String TEXT_301 = ".getId());" + NL + "\t\tglobalMap.put(\"";
  protected final String TEXT_302 = "_FILE_TITLE\", file_";
  protected final String TEXT_303 = ".getTitle());" + NL + "\t\tif (file_";
  protected final String TEXT_304 = ".getCreatedDate() != null) {" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_305 = "_FILE_CREATED_AT\", new java.util.Date(file_";
  protected final String TEXT_306 = ".getCreatedDate().getValue()));" + NL + "\t\t}" + NL + "\t\tif (file_";
  protected final String TEXT_307 = ".getModifiedDate() != null) {" + NL + "\t\t\tglobalMap.put(\"";
  protected final String TEXT_308 = "_FILE_MODIFIED_AT\", new java.util.Date(file_";
  protected final String TEXT_309 = ".getModifiedDate().getValue()));" + NL + "\t\t}" + NL + "\t\tglobalMap.put(\"";
  protected final String TEXT_310 = "_FILE_OWNERS\", de.jlo.talendcomp.gdrive.DriveHelper.buildChainForUsers(file_";
  protected final String TEXT_311 = ".getOwners(), \",\"));" + NL + "\t\tglobalMap.put(\"";
  protected final String TEXT_312 = "_FILE_SIZE\", file_";
  protected final String TEXT_313 = ".getId());" + NL + "\t\tglobalMap.put(\"";
  protected final String TEXT_314 = "_FILE_MIME_TYPE\", file_";
  protected final String TEXT_315 = ".getMimeType());" + NL + "\t\tglobalMap.put(\"";
  protected final String TEXT_316 = "_FILE_IS_FOLDER\", de.jlo.talendcomp.gdrive.DriveHelper.isFolder(file_";
  protected final String TEXT_317 = "));";
  protected final String TEXT_318 = "\t";
  protected final String TEXT_319 = NL + "\t    ";
  protected final String TEXT_320 = " = new ";
  protected final String TEXT_321 = "Struct();" + NL + "\t\t";
  protected final String TEXT_322 = ".FILE_ID = file_";
  protected final String TEXT_323 = ".getId();" + NL + "\t\t";
  protected final String TEXT_324 = ".FILE_TITLE = file_";
  protected final String TEXT_325 = ".getTitle();" + NL + "\t\t";
  protected final String TEXT_326 = ".ORIGINAL_FILE_NAME = file_";
  protected final String TEXT_327 = ".getOriginalFilename();" + NL + "\t\t";
  protected final String TEXT_328 = ".FILE_EXTENSION = file_";
  protected final String TEXT_329 = ".getFileExtension();" + NL + "\t\tif (file_";
  protected final String TEXT_330 = ".getCreatedDate() != null) {" + NL + "\t\t\t";
  protected final String TEXT_331 = ".FILE_CREATED_AT = new java.util.Date(file_";
  protected final String TEXT_332 = ".getCreatedDate().getValue());" + NL + "\t\t}" + NL + "\t\tif (file_";
  protected final String TEXT_333 = ".getModifiedDate() != null) {" + NL + "\t\t\t";
  protected final String TEXT_334 = ".FILE_LAST_MODIFIED_AT = new java.util.Date(file_";
  protected final String TEXT_335 = ".getModifiedDate().getValue());" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_336 = ".FILE_MIME_TYPE = file_";
  protected final String TEXT_337 = ".getMimeType();" + NL + "\t\t";
  protected final String TEXT_338 = ".FILE_DOWNLOAD_URL = file_";
  protected final String TEXT_339 = ".getDownloadUrl();" + NL + "\t\t";
  protected final String TEXT_340 = ".FILE_WEB_CONTENT_LINK = file_";
  protected final String TEXT_341 = ".getWebContentLink();" + NL + "\t\t";
  protected final String TEXT_342 = ".FILE_SIZE = file_";
  protected final String TEXT_343 = ".getFileSize();" + NL + "\t\t";
  protected final String TEXT_344 = ".FILE_OWNERS = de.jlo.talendcomp.gdrive.DriveHelper.buildChainForUsers(file_";
  protected final String TEXT_345 = ".getOwners(), \",\");" + NL + "\t\t";
  protected final String TEXT_346 = ".FILE_IS_FOLDER = de.jlo.talendcomp.gdrive.DriveHelper.isFolder(file_";
  protected final String TEXT_347 = ");";
  protected final String TEXT_348 = "\t" + NL + "\t";

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
     
   CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
   INode node = (INode) codeGenArgument.getArgument();
   String cid = node.getUniqueName();
   boolean useExistingClient = "true".equals(ElementParameterParser.getValue(node, "__USE_EXISTING_CLIENT__"));
   String component = ElementParameterParser.getValue(node, "__DRIVE_COMPONENT__");
   boolean useServiceAccount = "SERVICE_ACCOUNT".equals(ElementParameterParser.getValue(node, "__USE_SERVICE_ACCOUNT__"));
   String clientSecretFile = ElementParameterParser.getValue(node, "__CLIENT_SECRET_FILE__");
   String userEmail = ElementParameterParser.getValue(node, "__USER_ACCOUNT_EMAIL__");
   String applicationName = ElementParameterParser.getValue(node, "__APPLICATION_NAME__");
	String accountEmail = ElementParameterParser.getValue(node, "__SERVICE_ACCOUNT_EMAIL__");
	String keyFile = ElementParameterParser.getValue(node, "__KEY_FILE__");
	String timeout = ElementParameterParser.getValue(node, "__TIMEOUT_IN_SEC__");
	String timeOffset = ElementParameterParser.getValue(node, "__TIME_OFFSET__");
	String keepClient = ElementParameterParser.getValue(node, "__KEEP_CLIENT__");
	String keepClientName = ElementParameterParser.getValue(node, "__KEEP_CLIENT_KEY__");
	keepClientName = keepClientName != null && keepClientName.isEmpty() == false ? keepClientName : "\"\"";
	String mode = ElementParameterParser.getValue(node, "__MODE__");
	String filterRegex = ElementParameterParser.getValue(node, "__FILE_FILTER_REGEX__");
	if (filterRegex == null || filterRegex.trim().isEmpty()) {
		filterRegex = "null";
	}
	boolean filterRegexCaseSensitive = "true".equals(ElementParameterParser.getValue(node, "__FILE_FILTER_REGEX_CASE_SENSITIVE__"));
	String fileId = ElementParameterParser.getValue(node, "__FILE_ID__");
	String driveFilePath = ElementParameterParser.getValue(node, "__DRIVE_FILE_PATH__");
	boolean ignoreMissing = "true".equals(ElementParameterParser.getValue(node, "__IGNORE_MISSING__"));
	String fileTitle = ElementParameterParser.getValue(node, "__FILE_TITLE__");
	if (fileTitle == null || fileTitle.trim().isEmpty()) {
		fileTitle = "null";
	}
	String localUploadFile = ElementParameterParser.getValue(node, "__LOCAL_FILE_TO_UPLOAD__");
	String remotePath = ElementParameterParser.getValue(node, "__REMOTE_PATH__");
	if (remotePath == null || remotePath.trim().isEmpty()) {
		remotePath = "null";
	}
	boolean createRemoteDir = "true".equals(ElementParameterParser.getValue(node, "__CREATE_REMOTE_PATH__"));
	String qString = ElementParameterParser.getValue(node, "__Q_STRING__");
	if (qString == null || qString.trim().isEmpty()) {
		qString = "null";
	}
	String titleStartsWith = ElementParameterParser.getValue(node, "__REMOTE_FILTER_TITLE_STARTSWITH__");
	if (titleStartsWith == null || titleStartsWith.trim().isEmpty()) {
		titleStartsWith = "null";
	}
	String fullTextSearch = ElementParameterParser.getValue(node, "__REMOTE_FILTER_FULLTEXT__");
	if (fullTextSearch == null || fullTextSearch.trim().isEmpty()) {
		fullTextSearch = "null";
	}
	String remoteSearchPath = ElementParameterParser.getValue(node, "__REMOTE_SEARCH_PATH__");
	if (remoteSearchPath == null || remoteSearchPath.trim().isEmpty()) {
		remoteSearchPath = "null";
	}
	String owner = ElementParameterParser.getValue(node, "__OWNER_EMAIL__");
	if (owner == null || owner.trim().isEmpty()) {
		owner = "null";
	}
	String remoteSearchModifiedFrom = ElementParameterParser.getValue(node, "__REMOTE_FILTER_MODIFYIED_FROM__");
	if (remoteSearchModifiedFrom == null || remoteSearchModifiedFrom.trim().isEmpty()) {
		remoteSearchModifiedFrom = "null";
	}
	String remoteSearchModifiedTo = ElementParameterParser.getValue(node, "__REMOTE_FILTER_MODIFYIED_TO__");
	if (remoteSearchModifiedTo == null || remoteSearchModifiedTo.trim().isEmpty()) {
		remoteSearchModifiedTo = "null";
	}
	boolean includeFolderInResult = "true".equals(ElementParameterParser.getValue(node, "__RETURN_FOLDERS_AS_WELL__"));
	String localFolder = ElementParameterParser.getValue(node, "__LOCAL_TARGET_FOLDER__");
	String localFileName = ElementParameterParser.getValue(node, "__LOCAL_TARGET_FILENAME__");
	if (localFileName == null || localFileName.trim().isEmpty()) {
		localFileName = "null";
	}
	boolean createDirs = "true".equals(ElementParameterParser.getValue(node, "__CREATE_LOCAL_DIR_IF_NOT_EXISTS__"));
	boolean overwrite = "true".equals(ElementParameterParser.getValue(node, "__OVERWRITE__"));
	boolean deleteInFs = "true".equals(ElementParameterParser.getValue(node, "__REMOVE_FROM_LOCAL_FS__"));
	boolean deleteInDrive = "true".equals(ElementParameterParser.getValue(node, "__REMOVE_FROM_DRIVE__"));
    List<? extends IConnection> connsFiles = node.getOutgoingConnections("FILES");
    String filesRowName = null;
    if (connsFiles != null && connsFiles.size() > 0) {
    	IConnection connTemp = connsFiles.get(0);
    	if (connTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
    		filesRowName = connTemp.getName();
    	}
    }
    String permOwner = ElementParameterParser.getValue(node, "__PERMISSION_AS_OWNER__");
    boolean permOwnerSendEmail = "true".equals(ElementParameterParser.getValue(node, "__PERMISSION_AS_OWNER_SEND_EMAIL__"));
    String permReader = ElementParameterParser.getValue(node, "__PERMISSION_AS_READER__");
    boolean permReaderSendEmail = "true".equals(ElementParameterParser.getValue(node, "__PERMISSION_AS_READER_SEND_EMAIL__"));
    String permWriter = ElementParameterParser.getValue(node, "__PERMISSION_AS_WRITER__");
    boolean permWriterSendEmail = "true".equals(ElementParameterParser.getValue(node, "__PERMISSION_AS_WRITER_SEND_EMAIL__"));

     if ("true".equals(keepClient)) { 
    stringBuffer.append(TEXT_1);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_2);
    stringBuffer.append(accountEmail);
    stringBuffer.append(TEXT_3);
    stringBuffer.append(keepClientName);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_5);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_6);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_7);
     } else { 
    stringBuffer.append(TEXT_8);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_9);
     } 
      if (useExistingClient == false) { 
    stringBuffer.append(TEXT_10);
    stringBuffer.append(TEXT_11);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_12);
    stringBuffer.append(useServiceAccount);
    stringBuffer.append(TEXT_13);
      if (useServiceAccount) { 
    stringBuffer.append(TEXT_14);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_15);
    stringBuffer.append(accountEmail);
    stringBuffer.append(TEXT_16);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_17);
    stringBuffer.append(keyFile);
    stringBuffer.append(TEXT_18);
     } else { 
    stringBuffer.append(TEXT_19);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_20);
    stringBuffer.append(userEmail);
    stringBuffer.append(TEXT_21);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_22);
    stringBuffer.append(clientSecretFile);
    stringBuffer.append(TEXT_23);
     } 
    stringBuffer.append(TEXT_24);
     if (timeout != null && timeout.trim().isEmpty() == false) { 
    stringBuffer.append(TEXT_25);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_26);
    stringBuffer.append(timeout);
    stringBuffer.append(TEXT_27);
     } 
     if (timeOffset != null && timeOffset.trim().isEmpty() == false) { 
    stringBuffer.append(TEXT_28);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_29);
    stringBuffer.append(timeOffset);
    stringBuffer.append(TEXT_30);
     } 
     if (applicationName != null && applicationName.trim().isEmpty() == false) { 
    stringBuffer.append(TEXT_31);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_32);
    stringBuffer.append(applicationName);
    stringBuffer.append(TEXT_33);
     } 
    stringBuffer.append(TEXT_34);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_35);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_36);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_37);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_38);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_39);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_40);
       if ("true".equals(keepClient)) { 
    stringBuffer.append(TEXT_41);
    stringBuffer.append(accountEmail);
    stringBuffer.append(TEXT_42);
    stringBuffer.append(keepClientName);
    stringBuffer.append(TEXT_43);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_44);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_45);
       } 
     } else { // if (useExistingClient == false) 
    stringBuffer.append(TEXT_46);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_47);
    stringBuffer.append(component);
    stringBuffer.append(TEXT_48);
     } // if (useExistingClient == false) 
    stringBuffer.append(TEXT_49);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_50);
     if ("DELETE".equals(mode)) { 
    stringBuffer.append(TEXT_51);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_52);
     if (fileId != null && fileId.trim().isEmpty() == false) { 
    stringBuffer.append(TEXT_53);
    stringBuffer.append(fileId);
    stringBuffer.append(TEXT_54);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_55);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_56);
    stringBuffer.append(fileId);
    stringBuffer.append(TEXT_57);
    stringBuffer.append(ignoreMissing);
    stringBuffer.append(TEXT_58);
     } else if (driveFilePath != null && driveFilePath.trim().isEmpty() == false) { 
    stringBuffer.append(TEXT_59);
    stringBuffer.append(driveFilePath);
    stringBuffer.append(TEXT_60);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_61);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_62);
    stringBuffer.append(driveFilePath);
    stringBuffer.append(TEXT_63);
    stringBuffer.append(ignoreMissing);
    stringBuffer.append(TEXT_64);
     } else { 
    stringBuffer.append(TEXT_65);
     } 
    stringBuffer.append(TEXT_66);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_67);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_68);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_69);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_70);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_71);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_72);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_73);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_74);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_75);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_76);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_77);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_78);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_79);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_80);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_81);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_82);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_83);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_84);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_85);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_86);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_87);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_88);
     if (filesRowName != null) { 
    stringBuffer.append(TEXT_89);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_90);
     } 
    stringBuffer.append(TEXT_91);
     } else if ("PROPERTIES".equals(mode)) { 
    stringBuffer.append(TEXT_92);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_93);
     if (fileId != null && fileId.trim().isEmpty() == false) { 
    stringBuffer.append(TEXT_94);
    stringBuffer.append(fileId);
    stringBuffer.append(TEXT_95);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_96);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_97);
    stringBuffer.append(fileId);
    stringBuffer.append(TEXT_98);
     } else if (driveFilePath != null && driveFilePath.trim().isEmpty() == false) { 
    stringBuffer.append(TEXT_99);
    stringBuffer.append(driveFilePath);
    stringBuffer.append(TEXT_100);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_101);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_102);
    stringBuffer.append(driveFilePath);
    stringBuffer.append(TEXT_103);
     } else { 
    stringBuffer.append(TEXT_104);
     } 
    stringBuffer.append(TEXT_105);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_106);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_107);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_108);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_109);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_110);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_111);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_112);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_113);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_114);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_115);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_116);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_117);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_118);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_119);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_120);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_121);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_122);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_123);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_124);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_125);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_126);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_127);
     if (filesRowName != null) { 
    stringBuffer.append(TEXT_128);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_129);
     } 
    stringBuffer.append(TEXT_130);
     } else if ("MOVE".equals(mode)) { 
    stringBuffer.append(TEXT_131);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_132);
     if (fileId != null && fileId.trim().isEmpty() == false) { 
    stringBuffer.append(TEXT_133);
    stringBuffer.append(fileId);
    stringBuffer.append(TEXT_134);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_135);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_136);
    stringBuffer.append(fileId);
    stringBuffer.append(TEXT_137);
    stringBuffer.append(remotePath);
    stringBuffer.append(TEXT_138);
    stringBuffer.append(createRemoteDir);
    stringBuffer.append(TEXT_139);
     } else if (driveFilePath != null && driveFilePath.trim().isEmpty() == false) { 
    stringBuffer.append(TEXT_140);
    stringBuffer.append(driveFilePath);
    stringBuffer.append(TEXT_141);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_142);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_143);
    stringBuffer.append(driveFilePath);
    stringBuffer.append(TEXT_144);
    stringBuffer.append(remotePath);
    stringBuffer.append(TEXT_145);
    stringBuffer.append(createRemoteDir);
    stringBuffer.append(TEXT_146);
     } else { 
    stringBuffer.append(TEXT_147);
     } 
    stringBuffer.append(TEXT_148);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_149);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_150);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_151);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_152);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_153);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_154);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_155);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_156);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_157);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_158);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_159);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_160);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_161);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_162);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_163);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_164);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_165);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_166);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_167);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_168);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_169);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_170);
     if (filesRowName != null) { 
    stringBuffer.append(TEXT_171);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_172);
     } 
    stringBuffer.append(TEXT_173);
     } else if ("UPLOAD".equals(mode)) { 
    stringBuffer.append(TEXT_174);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_175);
    stringBuffer.append(localUploadFile);
    stringBuffer.append(TEXT_176);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_177);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_178);
    stringBuffer.append(localUploadFile);
    stringBuffer.append(TEXT_179);
    stringBuffer.append(fileTitle);
    stringBuffer.append(TEXT_180);
    stringBuffer.append(remotePath);
    stringBuffer.append(TEXT_181);
    stringBuffer.append(createRemoteDir);
    stringBuffer.append(TEXT_182);
    stringBuffer.append(overwrite);
    stringBuffer.append(TEXT_183);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_184);
      if (permOwner != null && permOwner.trim().isEmpty() == false) { 
    stringBuffer.append(TEXT_185);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_186);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_187);
    stringBuffer.append(permOwner);
    stringBuffer.append(TEXT_188);
    stringBuffer.append(permOwnerSendEmail);
    stringBuffer.append(TEXT_189);
      } 
      if (permReader != null && permReader.trim().isEmpty() == false) { 
    stringBuffer.append(TEXT_190);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_191);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_192);
    stringBuffer.append(permReader);
    stringBuffer.append(TEXT_193);
    stringBuffer.append(permReaderSendEmail);
    stringBuffer.append(TEXT_194);
      } 
      if (permWriter != null && permWriter.trim().isEmpty() == false) { 
    stringBuffer.append(TEXT_195);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_196);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_197);
    stringBuffer.append(permWriter);
    stringBuffer.append(TEXT_198);
    stringBuffer.append(permWriterSendEmail);
    stringBuffer.append(TEXT_199);
      } 
    stringBuffer.append(TEXT_200);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_201);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_202);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_203);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_204);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_205);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_206);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_207);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_208);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_209);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_210);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_211);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_212);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_213);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_214);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_215);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_216);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_217);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_218);
      if (deleteInFs) { 
    stringBuffer.append(TEXT_219);
    stringBuffer.append(localUploadFile);
    stringBuffer.append(TEXT_220);
      } 
    stringBuffer.append(TEXT_221);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_222);
     if (filesRowName != null) { 
    stringBuffer.append(TEXT_223);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_224);
     } 
    stringBuffer.append(TEXT_225);
     } else if ("DOWNLOAD".equals(mode)) { 
    stringBuffer.append(TEXT_226);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_227);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_228);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_229);
     if (fileId != null && fileId.trim().isEmpty() == false) { 
    stringBuffer.append(TEXT_230);
    stringBuffer.append(fileId);
    stringBuffer.append(TEXT_231);
    stringBuffer.append(localFolder);
    stringBuffer.append(TEXT_232);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_233);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_234);
    stringBuffer.append(fileId);
    stringBuffer.append(TEXT_235);
    stringBuffer.append(localFolder);
    stringBuffer.append(TEXT_236);
    stringBuffer.append(localFileName);
    stringBuffer.append(TEXT_237);
    stringBuffer.append(createDirs);
    stringBuffer.append(TEXT_238);
     } else if (driveFilePath != null && driveFilePath.trim().isEmpty() == false) { 
    stringBuffer.append(TEXT_239);
    stringBuffer.append(driveFilePath);
    stringBuffer.append(TEXT_240);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_241);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_242);
    stringBuffer.append(driveFilePath);
    stringBuffer.append(TEXT_243);
    stringBuffer.append(localFolder);
    stringBuffer.append(TEXT_244);
    stringBuffer.append(localFileName);
    stringBuffer.append(TEXT_245);
    stringBuffer.append(createDirs);
    stringBuffer.append(TEXT_246);
     } else { 
    stringBuffer.append(TEXT_247);
     } 
    stringBuffer.append(TEXT_248);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_249);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_250);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_251);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_252);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_253);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_254);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_255);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_256);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_257);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_258);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_259);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_260);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_261);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_262);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_263);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_264);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_265);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_266);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_267);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_268);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_269);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_270);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_271);
    	if (deleteInDrive) { 
    stringBuffer.append(TEXT_272);
    stringBuffer.append(fileId);
    stringBuffer.append(TEXT_273);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_274);
    stringBuffer.append(fileId);
    stringBuffer.append(TEXT_275);
     } 
    stringBuffer.append(TEXT_276);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_277);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_278);
     if (filesRowName != null) { 
    stringBuffer.append(TEXT_279);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_280);
     } 
    stringBuffer.append(TEXT_281);
     } else if ("LIST".equals(mode)) { 
    stringBuffer.append(TEXT_282);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_283);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_284);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_285);
    stringBuffer.append(filterRegex);
    stringBuffer.append(TEXT_286);
    stringBuffer.append(filterRegexCaseSensitive);
    stringBuffer.append(TEXT_287);
    stringBuffer.append(qString);
    stringBuffer.append(TEXT_288);
    stringBuffer.append(titleStartsWith);
    stringBuffer.append(TEXT_289);
    stringBuffer.append(fullTextSearch);
    stringBuffer.append(TEXT_290);
    stringBuffer.append(remoteSearchModifiedFrom);
    stringBuffer.append(TEXT_291);
    stringBuffer.append(remoteSearchModifiedTo);
    stringBuffer.append(TEXT_292);
    stringBuffer.append(owner);
    stringBuffer.append(TEXT_293);
    stringBuffer.append(includeFolderInResult);
    stringBuffer.append(TEXT_294);
    stringBuffer.append(remoteSearchPath);
    stringBuffer.append(TEXT_295);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_296);
     if (filesRowName != null) { 
    stringBuffer.append(TEXT_297);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_298);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_299);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_300);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_301);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_302);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_303);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_304);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_305);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_306);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_307);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_308);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_309);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_310);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_311);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_312);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_313);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_314);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_315);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_316);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_317);
     } 
    stringBuffer.append(TEXT_318);
     } // else if ("LIST".equals(mode)) 
     if ("CLIENT".equals(mode) == false && filesRowName != null) { 
    stringBuffer.append(TEXT_319);
    stringBuffer.append(filesRowName);
    stringBuffer.append(TEXT_320);
    stringBuffer.append(filesRowName);
    stringBuffer.append(TEXT_321);
    stringBuffer.append(filesRowName);
    stringBuffer.append(TEXT_322);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_323);
    stringBuffer.append(filesRowName);
    stringBuffer.append(TEXT_324);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_325);
    stringBuffer.append(filesRowName);
    stringBuffer.append(TEXT_326);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_327);
    stringBuffer.append(filesRowName);
    stringBuffer.append(TEXT_328);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_329);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_330);
    stringBuffer.append(filesRowName);
    stringBuffer.append(TEXT_331);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_332);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_333);
    stringBuffer.append(filesRowName);
    stringBuffer.append(TEXT_334);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_335);
    stringBuffer.append(filesRowName);
    stringBuffer.append(TEXT_336);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_337);
    stringBuffer.append(filesRowName);
    stringBuffer.append(TEXT_338);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_339);
    stringBuffer.append(filesRowName);
    stringBuffer.append(TEXT_340);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_341);
    stringBuffer.append(filesRowName);
    stringBuffer.append(TEXT_342);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_343);
    stringBuffer.append(filesRowName);
    stringBuffer.append(TEXT_344);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_345);
    stringBuffer.append(filesRowName);
    stringBuffer.append(TEXT_346);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_347);
     } 
    stringBuffer.append(TEXT_348);
    return stringBuffer.toString();
  }
}
